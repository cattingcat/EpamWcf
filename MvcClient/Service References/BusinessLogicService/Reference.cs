//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcClient.BusinessLogicService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BusinessLogicService.IServicePersonAccessor")]
    public interface IServicePersonAccessor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePersonAccessor/GetPersons", ReplyAction="http://tempuri.org/IServicePersonAccessor/GetPersonsResponse")]
        DataAccessors.Entity.Person[] GetPersons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePersonAccessor/GetPersons", ReplyAction="http://tempuri.org/IServicePersonAccessor/GetPersonsResponse")]
        System.Threading.Tasks.Task<DataAccessors.Entity.Person[]> GetPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePersonAccessor/GetPerson", ReplyAction="http://tempuri.org/IServicePersonAccessor/GetPersonResponse")]
        DataAccessors.Entity.Person GetPerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePersonAccessor/GetPerson", ReplyAction="http://tempuri.org/IServicePersonAccessor/GetPersonResponse")]
        System.Threading.Tasks.Task<DataAccessors.Entity.Person> GetPersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePersonAccessor/DeletePerson")]
        void DeletePerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePersonAccessor/DeletePerson")]
        System.Threading.Tasks.Task DeletePersonAsync(int personId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePersonAccessor/UpdatePerson")]
        void UpdatePerson(DataAccessors.Entity.Person person);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePersonAccessor/UpdatePerson")]
        System.Threading.Tasks.Task UpdatePersonAsync(DataAccessors.Entity.Person person);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePersonAccessor/AddPerson")]
        void AddPerson(DataAccessors.Entity.Person person);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePersonAccessor/AddPerson")]
        System.Threading.Tasks.Task AddPersonAsync(DataAccessors.Entity.Person person);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicePersonAccessorChannel : MvcClient.BusinessLogicService.IServicePersonAccessor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicePersonAccessorClient : System.ServiceModel.ClientBase<MvcClient.BusinessLogicService.IServicePersonAccessor>, MvcClient.BusinessLogicService.IServicePersonAccessor {
        
        public ServicePersonAccessorClient() {
        }
        
        public ServicePersonAccessorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicePersonAccessorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePersonAccessorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePersonAccessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataAccessors.Entity.Person[] GetPersons() {
            return base.Channel.GetPersons();
        }
        
        public System.Threading.Tasks.Task<DataAccessors.Entity.Person[]> GetPersonsAsync() {
            return base.Channel.GetPersonsAsync();
        }
        
        public DataAccessors.Entity.Person GetPerson(int id) {
            return base.Channel.GetPerson(id);
        }
        
        public System.Threading.Tasks.Task<DataAccessors.Entity.Person> GetPersonAsync(int id) {
            return base.Channel.GetPersonAsync(id);
        }
        
        public void DeletePerson(int personId) {
            base.Channel.DeletePerson(personId);
        }
        
        public System.Threading.Tasks.Task DeletePersonAsync(int personId) {
            return base.Channel.DeletePersonAsync(personId);
        }
        
        public void UpdatePerson(DataAccessors.Entity.Person person) {
            base.Channel.UpdatePerson(person);
        }
        
        public System.Threading.Tasks.Task UpdatePersonAsync(DataAccessors.Entity.Person person) {
            return base.Channel.UpdatePersonAsync(person);
        }
        
        public void AddPerson(DataAccessors.Entity.Person person) {
            base.Channel.AddPerson(person);
        }
        
        public System.Threading.Tasks.Task AddPersonAsync(DataAccessors.Entity.Person person) {
            return base.Channel.AddPersonAsync(person);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BusinessLogicService.IServicePhoneAccessor")]
    public interface IServicePhoneAccessor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePhoneAccessor/GetPhones", ReplyAction="http://tempuri.org/IServicePhoneAccessor/GetPhonesResponse")]
        DataAccessors.Entity.Phone[] GetPhones();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePhoneAccessor/GetPhones", ReplyAction="http://tempuri.org/IServicePhoneAccessor/GetPhonesResponse")]
        System.Threading.Tasks.Task<DataAccessors.Entity.Phone[]> GetPhonesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePhoneAccessor/GetPhonesByPersonId", ReplyAction="http://tempuri.org/IServicePhoneAccessor/GetPhonesByPersonIdResponse")]
        DataAccessors.Entity.Phone[] GetPhonesByPersonId(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePhoneAccessor/GetPhonesByPersonId", ReplyAction="http://tempuri.org/IServicePhoneAccessor/GetPhonesByPersonIdResponse")]
        System.Threading.Tasks.Task<DataAccessors.Entity.Phone[]> GetPhonesByPersonIdAsync(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePhoneAccessor/GetPhone", ReplyAction="http://tempuri.org/IServicePhoneAccessor/GetPhoneResponse")]
        DataAccessors.Entity.Phone GetPhone(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePhoneAccessor/GetPhone", ReplyAction="http://tempuri.org/IServicePhoneAccessor/GetPhoneResponse")]
        System.Threading.Tasks.Task<DataAccessors.Entity.Phone> GetPhoneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePhoneAccessor/DeletePhone")]
        void DeletePhone(int phoneId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePhoneAccessor/DeletePhone")]
        System.Threading.Tasks.Task DeletePhoneAsync(int phoneId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePhoneAccessor/UpdatePhone")]
        void UpdatePhone(DataAccessors.Entity.Phone phone);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePhoneAccessor/UpdatePhone")]
        System.Threading.Tasks.Task UpdatePhoneAsync(DataAccessors.Entity.Phone phone);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePhoneAccessor/AddPhone")]
        void AddPhone(DataAccessors.Entity.Phone phone);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicePhoneAccessor/AddPhone")]
        System.Threading.Tasks.Task AddPhoneAsync(DataAccessors.Entity.Phone phone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicePhoneAccessorChannel : MvcClient.BusinessLogicService.IServicePhoneAccessor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicePhoneAccessorClient : System.ServiceModel.ClientBase<MvcClient.BusinessLogicService.IServicePhoneAccessor>, MvcClient.BusinessLogicService.IServicePhoneAccessor {
        
        public ServicePhoneAccessorClient() {
        }
        
        public ServicePhoneAccessorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicePhoneAccessorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePhoneAccessorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePhoneAccessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataAccessors.Entity.Phone[] GetPhones() {
            return base.Channel.GetPhones();
        }
        
        public System.Threading.Tasks.Task<DataAccessors.Entity.Phone[]> GetPhonesAsync() {
            return base.Channel.GetPhonesAsync();
        }
        
        public DataAccessors.Entity.Phone[] GetPhonesByPersonId(int personId) {
            return base.Channel.GetPhonesByPersonId(personId);
        }
        
        public System.Threading.Tasks.Task<DataAccessors.Entity.Phone[]> GetPhonesByPersonIdAsync(int personId) {
            return base.Channel.GetPhonesByPersonIdAsync(personId);
        }
        
        public DataAccessors.Entity.Phone GetPhone(int id) {
            return base.Channel.GetPhone(id);
        }
        
        public System.Threading.Tasks.Task<DataAccessors.Entity.Phone> GetPhoneAsync(int id) {
            return base.Channel.GetPhoneAsync(id);
        }
        
        public void DeletePhone(int phoneId) {
            base.Channel.DeletePhone(phoneId);
        }
        
        public System.Threading.Tasks.Task DeletePhoneAsync(int phoneId) {
            return base.Channel.DeletePhoneAsync(phoneId);
        }
        
        public void UpdatePhone(DataAccessors.Entity.Phone phone) {
            base.Channel.UpdatePhone(phone);
        }
        
        public System.Threading.Tasks.Task UpdatePhoneAsync(DataAccessors.Entity.Phone phone) {
            return base.Channel.UpdatePhoneAsync(phone);
        }
        
        public void AddPhone(DataAccessors.Entity.Phone phone) {
            base.Channel.AddPhone(phone);
        }
        
        public System.Threading.Tasks.Task AddPhoneAsync(DataAccessors.Entity.Phone phone) {
            return base.Channel.AddPhoneAsync(phone);
        }
    }
}
